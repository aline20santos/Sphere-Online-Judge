# -*- coding: utf-8 -*-
"""ONP - Transform the Expression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18kg8dTjC2LSJldBxvhnPheknYElKBECJ
"""

# Transform the algebraic expression with brackets into RPN form 
# (Reverse Polish Notation). Two-argument operators: +, -, *, /, ^ 
# (priority from the lowest to the highest), brackets ( ). 
# Operands: only letters: a,b,...,z. Assume that there is only one RPN form 
# (no expressions like a*b*c).

# Input
# t [the number of expressions <= 100]
# expression [length <= 400]
# [other expressions]

# Output:
# The expressions in RPN form, one per line.

# Example:
#   Input:
#   3
#   (a+(b*c))
#   ((a+b)*(z+x))
#   ((a+t)*((b+(a+c))^(c+d)))

#   Output:
#   abc*+
#   ab+zx+*
#   at+bac++cd+^*

numExpressions = int(input())

opStack = []
expressions = []

for n in range(numExpressions):
  expressions.append(input()) 
  #Append is equivalent to push in python, but puts the number at the end of the stack

for e in expressions:
  for c in e:
    if c == '+' or c == '-' or c == '*' or c == '/' or c == '^':
      if len(opStack) > 0 and opStack[-1] != '(':
        print(opStack.pop(), end='')
      opStack.append(c)
    
    elif c == '(':
      opStack.append(c)
    elif c == ')':
      while opStack[-1] != '(':
        print(opStack.pop(), end='')
      opStack.pop() 
    else:
      print(c, end='')
      
  while len(opStack) > 0:
    print(opStack.pop(), end='')
  
  print()

